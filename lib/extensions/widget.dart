import 'package:flutter/material.dart' as material;

import '../material.dart';
import '../extensions.dart';

extension WidgetUtils on Widget {
  material.Widget toFlutter(material.BuildContext context) {
    return material.Builder(
      builder: (context) => map(
        flex: (data) => material.Flex(
          key: data.key?.toFlutter(context),
          direction: data.direction.toFlutter(context),
          mainAxisAlignment: data.mainAxisAlignment.toFlutter(context),
          mainAxisSize: data.mainAxisSize.toFlutter(context),
          crossAxisAlignment: data.crossAxisAlignment.toFlutter(context),
          textDirection: data.textDirection?.toFlutter(context),
          verticalDirection: data.verticalDirection.toFlutter(context),
          textBaseline: data.textBaseline?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          children: data.children.map((e) => e.toFlutter(context)).toList(),
        ),
        row: (data) => material.Row(
          key: data.key?.toFlutter(context),
          mainAxisAlignment: data.mainAxisAlignment.toFlutter(context),
          mainAxisSize: data.mainAxisSize.toFlutter(context),
          crossAxisAlignment: data.crossAxisAlignment.toFlutter(context),
          textDirection: data.textDirection?.toFlutter(context),
          verticalDirection: data.verticalDirection.toFlutter(context),
          textBaseline: data.textBaseline?.toFlutter(context),
          children: data.children.map((e) => e.toFlutter(context)).toList(),
        ),
        column: (data) => material.Column(
          key: data.key?.toFlutter(context),
          mainAxisAlignment: data.mainAxisAlignment.toFlutter(context),
          mainAxisSize: data.mainAxisSize.toFlutter(context),
          crossAxisAlignment: data.crossAxisAlignment.toFlutter(context),
          textDirection: data.textDirection?.toFlutter(context),
          verticalDirection: data.verticalDirection.toFlutter(context),
          textBaseline: data.textBaseline?.toFlutter(context),
          children: data.children.map((e) => e.toFlutter(context)).toList(),
        ),
        stack: (data) => material.Stack(
          key: data.key?.toFlutter(context),
          alignment: data.alignment.toFlutter(context),
          textDirection: data.textDirection?.toFlutter(context),
          fit: data.fit.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          children: data.children.map((e) => e.toFlutter(context)).toList(),
        ),
        wrap: (data) => material.Wrap(
          key: data.key?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          direction: data.direction.toFlutter(context),
          alignment: data.alignment.toFlutter(context),
          spacing: data.spacing,
          runSpacing: data.runSpacing,
          runAlignment: data.runAlignment.toFlutter(context),
          crossAxisAlignment: data.crossAxisAlignment.toFlutter(context),
          textDirection: data.textDirection?.toFlutter(context),
          verticalDirection: data.verticalDirection.toFlutter(context),
          children: data.children.map((e) => e.toFlutter(context)).toList(),
        ),
        positioned: (data) => material.Positioned(
          key: data.key?.toFlutter(context),
          left: data.left,
          top: data.top,
          right: data.right,
          bottom: data.bottom,
          width: data.width,
          height: data.height,
          child: data.child.toFlutter(context),
        ),
        image: (data) => material.Image(
          key: data.key?.toFlutter(context),
          image: data.image.toFlutter(context),
          semanticLabel: data.semanticLabel,
          excludeFromSemantics: data.excludeFromSemantics,
          width: data.width,
          height: data.height,
          color: data.color?.toFlutter(context),
          colorBlendMode: data.colorBlendMode?.toFlutter(context),
          fit: data.fit?.toFlutter(context),
          alignment: data.alignment.toFlutter(context),
          repeat: data.repeat.toFlutter(context),
          centerSlice: data.centerSlice?.toFlutter(context),
          matchTextDirection: data.matchTextDirection,
          gaplessPlayback: data.gaplessPlayback,
          isAntiAlias: data.isAntiAlias,
          filterQuality: data.filterQuality.toFlutter(context),
        ),
        flexible: (data) => material.Flexible(
          key: data.key?.toFlutter(context),
          flex: data.flex,
          fit: data.fit.toFlutter(context),
          child: data.child.toFlutter(context),
        ),
        expanded: (data) => material.Expanded(
          key: data.key?.toFlutter(context),
          flex: data.flex,
          child: data.child.toFlutter(context),
        ),
        center: (data) => material.Center(
          key: data.key?.toFlutter(context),
          widthFactor: data.widthFactor,
          heightFactor: data.heightFactor,
          child: data.child.toFlutter(context),
        ),
        padding: (data) => material.Padding(
          key: data.key?.toFlutter(context),
          padding: data.padding.toFlutter(context),
          child: data.child.toFlutter(context),
        ),
        scrollBar: (data) => material.Scrollbar(
          key: data.key?.toFlutter(context),
          radius: data.radius?.toFlutter(context),
          thickness: data.thickness,
          interactive: data.interactive,
          thumbVisibility: data.thumbVisibility,
          trackVisibility: data.trackVisibility,
          scrollbarOrientation: data.scrollbarOrientation?.toFlutter(context),
          child: data.child.toFlutter(context),
        ),
        singleChildScrollView: (data) => material.SingleChildScrollView(
          key: data.key?.toFlutter(context),
          scrollDirection: data.scrollDirection.toFlutter(context),
          reverse: data.reverse,
          padding: data.padding?.toFlutter(context),
          primary: data.primary,
          physics: data.physics?.toFlutter(context),
          restorationId: data.restorationId,
          child: data.child?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          keyboardDismissBehavior:
              data.keyboardDismissBehavior.toFlutter(context),
        ),
        listView: (data) => material.ListView(
          key: data.key?.toFlutter(context),
          scrollDirection: data.scrollDirection.toFlutter(context),
          reverse: data.reverse,
          primary: data.primary,
          physics: data.physics?.toFlutter(context),
          shrinkWrap: data.shrinkWrap,
          padding: data.padding?.toFlutter(context),
          itemExtent: data.itemExtent,
          prototypeItem: data.prototypeItem?.toFlutter(context),
          addAutomaticKeepAlives: data.addAutomaticKeepAlives,
          addRepaintBoundaries: data.addRepaintBoundaries,
          addSemanticIndexes: data.addSemanticIndexes,
          cacheExtent: data.cacheExtent,
          children: data.children.map((e) => e.toFlutter(context)).toList(),
          semanticChildCount: data.semanticChildCount,
          restorationId: data.restorationId,
          clipBehavior: data.clipBehavior.toFlutter(context),
        ),
        icon: (data) => material.Icon(
          data.icon?.toFlutter(context),
          key: data.key?.toFlutter(context),
          size: data.size,
          fill: data.fill,
          weight: data.weight,
          grade: data.grade,
          opticalSize: data.opticalSize,
          color: data.color?.toFlutter(context),
          shadows: data.shadows?.map((e) => e.toFlutter(context)).toList(),
          semanticLabel: data.semanticLabel,
          textDirection: data.textDirection?.toFlutter(context),
        ),
        iconButton: (data) => material.IconButton(
          key: data.key?.toFlutter(context),
          iconSize: data.iconSize,
          visualDensity: data.visualDensity?.toFlutter(context),
          padding: data.padding?.toFlutter(context),
          alignment: data.alignment?.toFlutter(context),
          splashRadius: data.splashRadius,
          color: data.color?.toFlutter(context),
          focusColor: data.focusColor?.toFlutter(context),
          hoverColor: data.hoverColor?.toFlutter(context),
          highlightColor: data.highlightColor?.toFlutter(context),
          splashColor: data.splashColor?.toFlutter(context),
          disabledColor: data.disabledColor?.toFlutter(context),
          onPressed: data.onPressed.toFlutter(context),
          mouseCursor: data.mouseCursor?.toFlutter(context),
          autofocus: data.autofocus,
          tooltip: data.tooltip,
          enableFeedback: data.enableFeedback,
          constraints: data.constraints?.toFlutter(context),
          isSelected: data.isSelected,
          selectedIcon: data.selectedIcon?.toFlutter(context),
          icon: data.icon.toFlutter(context),
        ),
        scaffold: (data) => material.Scaffold(
          key: data.key?.toFlutter(context),
          appBar: data.appBar?.toFlutter(context),
          body: data.body?.toFlutter(context),
          floatingActionButton: data.floatingActionButton?.toFlutter(context),
          floatingActionButtonLocation:
              data.floatingActionButtonLocation?.toFlutter(context),
          persistentFooterButtons: data.persistentFooterButtons
              ?.map((e) => e.toFlutter(context))
              .toList(),
          persistentFooterAlignment:
              data.persistentFooterAlignment.toFlutterDirectional(context),
          drawer: data.drawer?.toFlutter(context),
          endDrawer: data.endDrawer?.toFlutter(context),
          bottomNavigationBar: data.bottomNavigationBar?.toFlutter(context),
          bottomSheet: data.bottomSheet?.toFlutter(context),
          backgroundColor: data.backgroundColor?.toFlutter(context),
          resizeToAvoidBottomInset: data.resizeToAvoidBottomInset,
          primary: data.primary,
          extendBody: data.extendBody,
          extendBodyBehindAppBar: data.extendBodyBehindAppBar,
          drawerScrimColor: data.drawerScrimColor?.toFlutter(context),
          drawerEdgeDragWidth: data.drawerEdgeDragWidth,
          drawerEnableOpenDragGesture: data.drawerEnableOpenDragGesture,
          endDrawerEnableOpenDragGesture: data.endDrawerEnableOpenDragGesture,
          restorationId: data.restorationId,
        ),
        floatingActionButton: (data) => material.FloatingActionButton(
          key: data.key?.toFlutter(context),
          child: data.child?.toFlutter(context),
          tooltip: data.tooltip,
          foregroundColor: data.foregroundColor?.toFlutter(context),
          backgroundColor: data.backgroundColor?.toFlutter(context),
          focusColor: data.focusColor?.toFlutter(context),
          hoverColor: data.hoverColor?.toFlutter(context),
          splashColor: data.splashColor?.toFlutter(context),
          elevation: data.elevation,
          focusElevation: data.focusElevation,
          hoverElevation: data.hoverElevation,
          highlightElevation: data.highlightElevation,
          disabledElevation: data.disabledElevation,
          onPressed: data.onPressed?.toFlutter(context),
          mouseCursor: data.mouseCursor?.toFlutter(context),
          mini: data.mini,
          shape: data.shape?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          autofocus: data.autofocus,
          materialTapTargetSize: data.materialTapTargetSize?.toFlutter(context),
          isExtended: data.isExtended,
          enableFeedback: data.enableFeedback,
        ),
        floatingActionButtonExtended: (data) =>
            material.FloatingActionButton.extended(
          key: data.key?.toFlutter(context),
          label: data.label.toFlutter(context),
          icon: data.icon?.toFlutter(context),
          tooltip: data.tooltip,
          foregroundColor: data.foregroundColor?.toFlutter(context),
          backgroundColor: data.backgroundColor?.toFlutter(context),
          focusColor: data.focusColor?.toFlutter(context),
          hoverColor: data.hoverColor?.toFlutter(context),
          splashColor: data.splashColor?.toFlutter(context),
          elevation: data.elevation,
          focusElevation: data.focusElevation,
          hoverElevation: data.hoverElevation,
          highlightElevation: data.highlightElevation,
          disabledElevation: data.disabledElevation,
          onPressed: data.onPressed?.toFlutter(context),
          mouseCursor: data.mouseCursor?.toFlutter(context),
          shape: data.shape?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          autofocus: data.autofocus,
          materialTapTargetSize: data.materialTapTargetSize?.toFlutter(context),
          isExtended: data.isExtended,
          enableFeedback: data.enableFeedback,
        ),
        constrainedBox: (data) => material.ConstrainedBox(
          key: data.key?.toFlutter(context),
          constraints: data.constraints.toFlutter(context),
          child: data.child?.toFlutter(context),
        ),
        text: (data) => material.Text(
          key: data.key?.toFlutter(context),
          data.data,
          style: data.style?.toFlutter(context),
          strutStyle: data.strutStyle?.toFlutter(context),
          textAlign: data.textAlign?.toFlutter(context),
          textDirection: data.textDirection?.toFlutter(context),
          locale: data.locale?.toFlutter(context),
          softWrap: data.softWrap,
          overflow: data.overflow?.toFlutter(context),
          textScaleFactor: data.textScaleFactor,
          maxLines: data.maxLines,
          semanticsLabel: data.semanticsLabel,
          textWidthBasis: data.textWidthBasis?.toFlutter(context),
          textHeightBehavior: data.textHeightBehavior?.toFlutter(context),
          selectionColor: data.selectionColor?.toFlutter(context),
        ),
        sizedBox: (data) => material.SizedBox(
          key: data.key?.toFlutter(context),
          width: data.width,
          height: data.height,
          child: data.child?.toFlutter(context),
        ),
        spacer: (data) => material.SizedBox(
          key: data.key?.toFlutter(context),
        ),
        container: (data) => material.Container(
          key: data.key?.toFlutter(context),
          alignment: data.alignment?.toFlutter(context),
          padding: data.padding?.toFlutter(context),
          color: data.color?.toFlutter(context),
          decoration: data.decoration?.toFlutter(context),
          foregroundDecoration: data.foregroundDecoration?.toFlutter(context),
          width: data.width,
          height: data.height,
          constraints: data.constraints?.toFlutter(context),
          margin: data.margin?.toFlutter(context),
          transform: data.transform?.toFlutter(context),
          transformAlignment: data.transformAlignment?.toFlutter(context),
          child: data.child?.toFlutter(context),
        ),
        card: (data) => material.Card(
          key: data.key?.toFlutter(context),
          color: data.color?.toFlutter(context),
          shadowColor: data.shadowColor?.toFlutter(context),
          surfaceTintColor: data.surfaceTintColor?.toFlutter(context),
          elevation: data.elevation,
          shape: data.shape?.toFlutter(context),
          borderOnForeground: data.borderOnForeground,
          margin: data.margin?.toFlutter(context),
          clipBehavior: data.clipBehavior?.toFlutter(context),
          child: data.child?.toFlutter(context),
          semanticContainer: data.semanticContainer,
        ),
        divider: (data) => material.Divider(
          key: data.key?.toFlutter(context),
          height: data.height,
          thickness: data.thickness,
          indent: data.indent,
          endIndent: data.endIndent,
          color: data.color?.toFlutter(context),
        ),
        verticalDivider: (data) => material.VerticalDivider(
          key: data.key?.toFlutter(context),
          width: data.width,
          thickness: data.thickness,
          indent: data.indent,
          endIndent: data.endIndent,
          color: data.color?.toFlutter(context),
        ),
        material: (data) => material.Material(
          key: data.key?.toFlutter(context),
          type: data.type.toFlutter(context),
          elevation: data.elevation,
          color: data.color?.toFlutter(context),
          shadowColor: data.shadowColor?.toFlutter(context),
          surfaceTintColor: data.surfaceTintColor?.toFlutter(context),
          textStyle: data.textStyle?.toFlutter(context),
          borderRadius: data.borderRadius?.toFlutter(context),
          shape: data.shape?.toFlutter(context),
          borderOnForeground: data.borderOnForeground,
          clipBehavior: data.clipBehavior.toFlutter(context),
          animationDuration: data.animationDuration,
          child: data.child?.toFlutter(context),
        ),
        materialButton: (data) => material.MaterialButton(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          mouseCursor: data.mouseCursor?.toFlutter(context),
          textColor: data.textColor?.toFlutter(context),
          disabledTextColor: data.disabledTextColor?.toFlutter(context),
          color: data.color?.toFlutter(context),
          disabledColor: data.disabledColor?.toFlutter(context),
          focusColor: data.focusColor?.toFlutter(context),
          hoverColor: data.hoverColor?.toFlutter(context),
          highlightColor: data.highlightColor?.toFlutter(context),
          splashColor: data.splashColor?.toFlutter(context),
          colorBrightness: data.colorBrightness?.toFlutter(context),
          elevation: data.elevation,
          focusElevation: data.focusElevation,
          hoverElevation: data.hoverElevation,
          highlightElevation: data.highlightElevation,
          disabledElevation: data.disabledElevation,
          padding: data.padding?.toFlutter(context),
          visualDensity: data.visualDensity?.toFlutter(context),
          shape: data.shape?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          autofocus: data.autofocus,
          materialTapTargetSize: data.materialTapTargetSize?.toFlutter(context),
          animationDuration: data.animationDuration,
          minWidth: data.minWidth,
          height: data.height,
          enableFeedback: data.enableFeedback,
          child: data.child?.toFlutter(context),
        ),
        outlinedButton: (data) => material.OutlinedButton(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          autofocus: data.autofocus,
          child: data.child.toFlutter(context),
        ),
        outlinedButtonIcon: (data) => material.OutlinedButton.icon(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior?.toFlutter(context),
          autofocus: data.autofocus,
          icon: data.icon.toFlutter(context),
          label: data.label.toFlutter(context),
        ),
        textButton: (data) => material.TextButton(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          autofocus: data.autofocus,
          child: data.child.toFlutter(context),
        ),
        textButtonIcon: (data) => material.TextButton.icon(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior?.toFlutter(context),
          autofocus: data.autofocus,
          icon: data.icon.toFlutter(context),
          label: data.label.toFlutter(context),
        ),
        filledButton: (data) => material.FilledButton(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          autofocus: data.autofocus,
          child: data.child.toFlutter(context),
        ),
        filledButtonIcon: (data) => material.FilledButton.icon(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior?.toFlutter(context),
          autofocus: data.autofocus,
          icon: data.icon.toFlutter(context),
          label: data.label.toFlutter(context),
        ),
        filledTonalButton: (data) => material.FilledButton.tonal(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          autofocus: data.autofocus,
          child: data.child.toFlutter(context),
        ),
        filledTonalButtonIcon: (data) => material.FilledButton.tonalIcon(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior?.toFlutter(context),
          autofocus: data.autofocus,
          icon: data.icon.toFlutter(context),
          label: data.label.toFlutter(context),
        ),
        elevatedButton: (data) => material.ElevatedButton(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          autofocus: data.autofocus,
          child: data.child.toFlutter(context),
        ),
        elevatedButtonIcon: (data) => material.ElevatedButton.icon(
          key: data.key?.toFlutter(context),
          onPressed: data.onPressed?.toFlutter(context),
          onLongPress: data.onLongPress?.toFlutter(context),
          clipBehavior: data.clipBehavior?.toFlutter(context),
          autofocus: data.autofocus,
          icon: data.icon.toFlutter(context),
          label: data.label.toFlutter(context),
        ),
        fractionallySizedBox: (data) => material.FractionallySizedBox(
          key: data.key?.toFlutter(context),
          alignment: data.alignment.toFlutter(context),
          widthFactor: data.widthFactor,
          heightFactor: data.heightFactor,
          child: data.child?.toFlutter(context),
        ),
        fittedBox: (data) => material.FittedBox(
          key: data.key?.toFlutter(context),
          fit: data.fit.toFlutter(context),
          alignment: data.alignment.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          child: data.child?.toFlutter(context),
        ),
        gridView: (data) => material.GridView(
          key: data.key?.toFlutter(context),
          scrollDirection: data.scrollDirection.toFlutter(context),
          reverse: data.reverse,
          primary: data.primary,
          physics: data.physics?.toFlutter(context),
          shrinkWrap: data.shrinkWrap,
          padding: data.padding?.toFlutter(context),
          gridDelegate: data.gridDelegate.toFlutter(context),
          addAutomaticKeepAlives: data.addAutomaticKeepAlives,
          addRepaintBoundaries: data.addRepaintBoundaries,
          addSemanticIndexes: data.addSemanticIndexes,
          cacheExtent: data.cacheExtent,
          children: data.children.map((e) => e.toFlutter(context)).toList(),
          semanticChildCount: data.semanticChildCount,
          clipBehavior: data.clipBehavior.toFlutter(context),
          keyboardDismissBehavior:
              data.keyboardDismissBehavior.toFlutter(context),
          restorationId: data.restorationId,
        ),
        placeholder: (data) => material.Placeholder(
          key: data.key?.toFlutter(context),
          color: data.color.toFlutter(context),
          strokeWidth: data.strokeWidth,
          fallbackWidth: data.fallbackWidth,
          fallbackHeight: data.fallbackHeight,
          child: data.child?.toFlutter(context),
        ),
        circularProgressIndicator: (data) => material.CircularProgressIndicator(
          key: data.key?.toFlutter(context),
          value: data.value,
          backgroundColor: data.backgroundColor?.toFlutter(context),
          color: data.color?.toFlutter(context),
          strokeWidth: data.strokeWidth,
          semanticsLabel: data.semanticsLabel,
          semanticsValue: data.semanticsValue,
        ),
        linearProgressIndicator: (data) => material.LinearProgressIndicator(
          key: data.key?.toFlutter(context),
          value: data.value,
          backgroundColor: data.backgroundColor?.toFlutter(context),
          color: data.color?.toFlutter(context),
          minHeight: data.minHeight,
          semanticsLabel: data.semanticsLabel,
          semanticsValue: data.semanticsValue,
        ),
        materialApp: (data) => material.MaterialApp(
          debugShowCheckedModeBanner: data.debugShowCheckedModeBanner,
          title: data.title,
          home: data.home != null ? data.home!.toFlutter(context) : null,
          routes: data.routes.map(
            (key, value) => MapEntry(key, (_) => value.toFlutter(context)),
          ),
          initialRoute: data.initialRoute,
          theme: data.theme != null ? data.theme!.toFlutter(context) : null,
          darkTheme: data.darkTheme != null
              ? data.darkTheme!.toFlutter(context)
              : null,
          highContrastTheme: data.highContrastTheme != null
              ? data.highContrastTheme!.toFlutter(context)
              : null,
          highContrastDarkTheme: data.highContrastDarkTheme != null
              ? data.highContrastDarkTheme!.toFlutter(context)
              : null,
          themeMode: data.themeMode?.toFlutter(context),
          themeAnimationDuration: data.themeAnimationDuration,
          themeAnimationCurve: data.themeAnimationCurve.toFlutter(context),
          locale: data.locale != null ? data.locale!.toFlutter(context) : null,
          supportedLocales:
              data.supportedLocales.map((e) => e.toFlutter(context)).toList(),
          debugShowMaterialGrid: data.debugShowMaterialGrid,
          showPerformanceOverlay: data.showPerformanceOverlay,
          checkerboardRasterCacheImages: data.checkerboardRasterCacheImages,
          checkerboardOffscreenLayers: data.checkerboardOffscreenLayers,
          showSemanticsDebugger: data.showSemanticsDebugger,
          restorationScopeId: data.restorationScopeId,
          useInheritedMediaQuery: data.useInheritedMediaQuery,
        ),
        interactiveViewer: (data) => material.InteractiveViewer(
          key: data.key?.toFlutter(context),
          clipBehavior: data.clipBehavior.toFlutter(context),
          panAxis: data.panAxis.toFlutter(context),
          boundaryMargin: data.boundaryMargin.toFlutter(context),
          constrained: data.constrained,
          maxScale: data.maxScale,
          minScale: data.minScale,
          interactionEndFrictionCoefficient:
              data.interactionEndFrictionCoefficient,
          panEnabled: data.panEnabled,
          scaleEnabled: data.scaleEnabled,
          scaleFactor: data.scaleFactor,
          alignment: data.alignment?.toFlutter(context),
          child: data.child.toFlutter(context),
        ),
      ),
    );
  }
}
